SubDir HAIKU_TOP src system boot arch x86 ;

SubDirC++Flags -fno-rtti ;

local defines = $(DEFINES) ;

local platform ;
for platform in [ MultiBootSubDirSetup bios_ia32 efi pxe_ia32 ] {
	on $(platform) {
		SubDirHdrs $(HAIKU_TOP) src system boot platform $(TARGET_BOOT_PLATFORM) ;

		DEFINES = $(defines) ;

		if $(TARGET_BOOT_PLATFORM) = efi {
			if $(TARGET_ARCH) = x86_64 {
				DEFINES += BOOT_SUPPORT_ELF64 ;
			} else {
				DEFINES += BOOT_SUPPORT_ELF32 ;
			}
		} else {
			DEFINES += BOOT_SUPPORT_ELF64 ;
			DEFINES += BOOT_SUPPORT_ELF32 ;
		}

		local kernelArchSources =
			arch_elf.cpp
		;

		local kernelGenericDriverSources =
			debug_uart.cpp
			debug_uart_8250.cpp
		;

		local kernelArchSpecificSources ;
		if $(TARGET_ARCH) = x86_64 && $(TARGET_BOOT_PLATFORM) = efi {
			kernelArchSpecificSources = cpuid.cpp ;
		} else {
			kernelArchSpecificSources = cpuid.S ;
		}

		local librootOsArchSources =
			byteorder.S
		;

		BootMergeObject [ FGristFiles boot_arch_$(TARGET_KERNEL_ARCH).o ] :
			$(kernelArchSources)
			$(kernelArchSpecificSources)
			$(kernelGenericDriverSources)
			$(librootOsArchSources)
			arch_cpu.cpp
			arch_hpet.cpp
			: -std=c++11 # additional flags
		;

		SEARCH on [ FGristFiles $(kernelGenericDriverSources) ]
			= [ FDirName $(HAIKU_TOP) src system kernel arch generic ] ;
		SEARCH on [ FGristFiles $(kernelArchSources) ]
			= [ FDirName $(HAIKU_TOP) src system kernel arch $(TARGET_KERNEL_ARCH_DIR) ] ;

		if $(TARGET_ARCH) = x86_64 && $(TARGET_BOOT_PLATFORM) = efi {
			SEARCH on [ FGristFiles $(kernelArchSpecificSources) ]
				= [ FDirName $(HAIKU_TOP) src system kernel arch x86 64 ] ;
		} else {
			SEARCH on [ FGristFiles $(kernelArchSpecificSources) ]
				= [ FDirName $(HAIKU_TOP) src system kernel arch x86 32 ] ;
		}
		SEARCH on [ FGristFiles $(librootOsArchSources) ]
			= [ FDirName $(HAIKU_TOP) src system libroot os arch x86 ] ;
	}
}
