# Jamfile for src/system/kernel/alloc

SubDir HAIKU_TOP src system kernel alloc ;

UsePrivateHeaders kernel ; # For kernel-specific headers if PAL needs more

# Default to slab, but allow override (e.g., from a build profile)
# For testing, you can uncomment and set this locally:
# HAIKU_KERNEL_ALLOCATOR ?= snmalloc ;
HAIKU_KERNEL_ALLOCATOR ?= slab ;

local allocatorObjects ;
local allocatorDefines ;

if $(HAIKU_KERNEL_ALLOCATOR) = snmalloc {
    # Use snmalloc
    Echo Kernel Allocator: snmalloc ;

    # Ensure include paths for snmalloc core headers and the kernel PAL
    # The snmalloc core headers are in BSD/snmalloc-main/src/
    # The PAL specific to kernel is in the 'snmalloc' subdirectory here.
    SubDirC++Flags
        -I$(HAIKU_TOP)/BSD/snmalloc-main/src
        -I$(SUBDIR)/snmalloc # For pal_haiku_kernel.h
    ;

    local snmallocTargetFlags = ;
    # Add snmalloc hardening flags
    snmallocTargetFlags += -DSNMALLOC_CHECK_CLIENT=1 -DSNMALLOC_PAGEID=1 -DSNMALLOC_CHECK_LOADS=1 ;
    # Optional: Enable verbose tracing within snmalloc
    # snmallocTargetFlags += -DSNMALLOC_TRACING=1 ;
    # Optional: Enable statistics gathering within snmalloc
    # snmallocTargetFlags += -DSNMALLOC_STATS=1 ;
    # Optional: Enable specific advanced security mitigations (can be combined with +)
    # See snmalloc/CMakeLists.txt for full list. Examples:
    # snmallocTargetFlags += -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="metadata_protection" ;
    # snmallocTargetFlags += -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="freelist_forward_edge" ;
    # snmallocTargetFlags += -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="random_pagemap" ;
    # Note: Some mitigations like 'pal_enforce_access' require specific PAL support.

    KernelMergeObject snmalloc_kernel_api.o :
        snmalloc/snmalloc_kernel_api.cpp
        : # Target specific flags
        $(snmallocTargetFlags)
    ;
    allocatorObjects = snmalloc_kernel_api.o ;

    # The -DKERNEL_ALLOCATOR_SNMALLOC define is now handled by the parent src/system/kernel/Jamfile
    # to ensure it's globally visible for kernel compilations when snmalloc is active.
    # This Jamfile only needs to worry about flags specific to snmalloc_kernel_api.o compilation.

} else {
    # Default to slab allocator (or any other chosen default)
    Echo Kernel Allocator: slab ;
    # The slab allocator is currently built via src/system/kernel/slab/Jamfile
    # and its objects are directly included in src/system/kernel/Jamfile.
    # This Jamfile (alloc/Jamfile) will produce an empty kernel_allocator.o
    # in this case, or we can make src/system/kernel/Jamfile conditional
    # on kernel_slab.o vs kernel_allocator.o from here.

    # For now, this Jamfile won't produce conflicting symbols if slab is default.
    # If this Jamfile *must* provide the 'kernel_allocator.o' target,
    # we'd do something like this:
    # KernelMergeObject slab_dummy.o : empty.cpp ; # Assuming an empty.cpp
    # allocatorObjects = slab_dummy.o ;
    # However, it's cleaner to adjust src/system/kernel/Jamfile to pick one.
}

# This object will be conditionally included in the main kernel link
# based on the allocator choice.
# If allocatorObjects is empty (e.g. slab is handled by its own Jamfile),
# then this target might not be strictly necessary, or kernel/Jamfile
# needs to be aware.
if $(allocatorObjects) {
    KernelMergeObject kernel_allocator.o :
        $(allocatorObjects)
    ;
    # If defines were set:
    # SubDirCcFlags $(allocatorDefines) ;
    # SubDirC++Flags $(allocatorDefines) ;
}

[end of src/system/kernel/alloc/Jamfile]
