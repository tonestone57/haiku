SubDir HAIKU_TOP src system libroot posix malloc ;

# Determine the malloc implementation to use for libroot.
# Default to 'openbsd', can be overridden by a build profile setting this variable.
# For testing, you can uncomment and set this locally:
# HAIKU_LIBROOT_ALLOCATOR ?= snmalloc ;
# HAIKU_LIBROOT_ALLOCATOR ?= openbsd ; # Original default
HAIKU_LIBROOT_ALLOCATOR = snmalloc ; # Force snmalloc for libroot

local architectureObject ;
for architectureObject in [ MultiArchSubDirSetup ] {
	on $(architectureObject) {
		local architecture = $(TARGET_PACKAGING_ARCH) ;
		UsePrivateSystemHeaders ;

		if $(HAIKU_LIBROOT_ALLOCATOR) = snmalloc {
			Echo Libroot Malloc: snmalloc ;

			local snmallocTargetFlags =
				-I$(HAIKU_TOP)/BSD/snmalloc-main/src  # For <snmalloc/...> includes
				# Include path for local PAL "snmalloc/pal_haiku_user.h" from snmalloc_hooks.cpp
				# $(SUBDIR) is src/system/libroot/posix/malloc
				# pal_haiku_user.h is in $(SUBDIR)/snmalloc/pal_haiku_user.h
				# So, snmalloc_hooks.cpp using #include "snmalloc/pal_haiku_user.h" should work if
				# current directory for compilation of snmalloc_hooks.cpp is $(SUBDIR)
				# No extra -I needed for this specific relative include if source is in $(SUBDIR)
				# However, if snmalloc_hooks.cpp itself was in a deeper subdir, we might need -I$(SUBDIR)
				-DLIBC_MALLOC_SNMALLOC_Hooks
				-DSNMALLOC_CHECK_CLIENT=1
				-DSNMALLOC_PAGEID=1
				-DSNMALLOC_CHECK_LOADS=1
				# Optional: -DSNMALLOC_TRACING=1
				# Optional: -DSNMALLOC_STATS=1
				# Optional: -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="metadata_protection"
				# Optional: -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="freelist_forward_edge"
				# Optional: -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="random_pagemap"
			;

			# Compile snmalloc_hooks.cpp with its specific flags into an intermediate object
			# snmalloc_hooks.cpp is in the same directory as this Jamfile ($(SUBDIR))
			# UsePrivateSystemHeaders (called earlier) should provide Haiku kit includes.
			local snmallocTargetFlags =
				# -I$(HAIKU_TOP)/BSD/snmalloc-main/src # REMOVED
				# Add include path for the new local snmalloc directory structure.
				# $(SUBDIR) is src/system/libroot/posix/malloc
				# This allows #include "snmalloc/file.h" and #include "pal/file.h"
				# from snmalloc_hooks.cpp (now in $(SUBDIR)/snmalloc/)
				# and <snmalloc/file.h> from core snmalloc files.
				-I$(SUBDIR)/snmalloc

				# Other flags
				-DLIBC_MALLOC_SNMALLOC_Hooks
				-DSNMALLOC_CHECK_CLIENT=1
				-DSNMALLOC_PAGEID=1
				-DSNMALLOC_CHECK_LOADS=1
				# Optional: -DSNMALLOC_TRACING=1
				# Optional: -DSNMALLOC_STATS=1
				# Optional: -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="metadata_protection"
				# Optional: -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="freelist_forward_edge"
				# Optional: -DSNMALLOC_CHECK_CLIENT_MITIGATIONS="random_pagemap"
			;

			Object <$(architecture)>snmalloc_hooks.o :
				snmalloc/snmalloc_hooks.cpp      # New path: source is now in the 'snmalloc' subdirectory
				: # Action flags for this specific Object rule
				$(snmallocTargetFlags)
			;
			NOCARE <$(architecture)>snmalloc_hooks.o ; # Restore this

			# Merge the specifically compiled object into the final target name
			MergeObject <$(architecture)>posix_malloc.o : # Restore this
				<$(architecture)>snmalloc_hooks.o
			;

		} else if $(HAIKU_LIBROOT_ALLOCATOR) = hoard2 {
			Echo Libroot Malloc: hoard2 ;
			# hoard2 has its own Jamfile in its subdirectory
			HaikuSubInclude hoard2 ;
		} else {
			# Default to openbsd
			Echo Libroot Malloc: openbsd ;
			# openbsd has its own Jamfile in its subdirectory
			HaikuSubInclude openbsd ;
		}
	}
}

# This will build posix_malloc_debug.o for the debug version of libroot.
# Moved to the end to avoid context issues with main allocator rules.
HaikuSubInclude debug ;
